// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.Data.Concrete.EntityFramework.Contexts;

namespace MyBlog.Data.Migrations
{
    [DbContext(typeof(MyBlogContext))]
    partial class MyBlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentsCount = 1,
                            Content = "Makale ile ilgili içerikler",
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 936, DateTimeKind.Local).AddTicks(4628),
                            Date = new DateTime(2021, 4, 10, 13, 12, 3, 936, DateTimeKind.Local).AddTicks(3111),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 936, DateTimeKind.Local).AddTicks(5417),
                            Note = "C# Yenilikleriyle ilgili Makale",
                            SeoAuthor = "Eray Bakır",
                            SeoDescription = "C# 9.0 Yenilikleri",
                            SeoTags = "C#,Net Core,Web,MVC",
                            Thumbnail = "Default.jpg",
                            Title = "C# 9.0 Yenilikleri",
                            UserId = 1,
                            ViewsCount = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CommentsCount = 2,
                            Content = "Makale ile ilgili içerikler",
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 936, DateTimeKind.Local).AddTicks(7257),
                            Date = new DateTime(2021, 4, 10, 13, 12, 3, 936, DateTimeKind.Local).AddTicks(7255),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 936, DateTimeKind.Local).AddTicks(7258),
                            Note = ".Net Core Yenilikleriyle ilgili Makale",
                            SeoAuthor = "Eray Bakır",
                            SeoDescription = ".Net Core Yenilikleri",
                            SeoTags = "C#,Net Core,Web,MVC",
                            Thumbnail = "Default.jpg",
                            Title = ".Net Core Yenilikleri",
                            UserId = 1,
                            ViewsCount = 100
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 941, DateTimeKind.Local).AddTicks(1642),
                            Description = "C# Programlama Diliyle İlgili Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 941, DateTimeKind.Local).AddTicks(1655),
                            Name = "C#",
                            Note = "C# Blog Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 941, DateTimeKind.Local).AddTicks(1668),
                            Description = ".Net Core MVC ile İlgili Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 941, DateTimeKind.Local).AddTicks(1670),
                            Name = ".Net Core MVC",
                            Note = ".Net Core MVC Blog Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 941, DateTimeKind.Local).AddTicks(1674),
                            Description = "Javascript ile İlgili Bilgiler",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 941, DateTimeKind.Local).AddTicks(1675),
                            Name = "Javascript",
                            Note = "Javascript Blog Kategorisi"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 939, DateTimeKind.Local).AddTicks(5550),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 939, DateTimeKind.Local).AddTicks(5561),
                            Note = "Makale Yorumu",
                            Text = "C# Yorumu"
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 939, DateTimeKind.Local).AddTicks(5576),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 939, DateTimeKind.Local).AddTicks(5577),
                            Note = "Makale Yorumu",
                            Text = ".Net Core MVC Yorumu"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 954, DateTimeKind.Local).AddTicks(1111),
                            Description = "Tüm erişimlere açıktır",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 954, DateTimeKind.Local).AddTicks(1121),
                            Name = "Admin",
                            Note = "Admin Rolü"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 4, 10, 13, 12, 3, 952, DateTimeKind.Local).AddTicks(3044),
                            Description = "Admin Kullanıcısı",
                            Email = "eray.bkr94@gmail.com",
                            FirstName = "Eray",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Bakır",
                            ModifiedByName = "Initial Create",
                            ModifiedDate = new DateTime(2021, 4, 10, 13, 12, 3, 952, DateTimeKind.Local).AddTicks(3057),
                            Note = "Admin Kullanıcısı",
                            PasswordHash = new byte[] { 50, 48, 50, 99, 98, 57, 54, 50, 97, 99, 53, 57, 48, 55, 53, 98, 57, 54, 52, 98, 48, 55, 49, 53, 50, 100, 50, 51, 52, 98, 55, 48 },
                            Picture = "https://picsum.photos/150",
                            RoleId = 1,
                            Username = "Blackerback"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
